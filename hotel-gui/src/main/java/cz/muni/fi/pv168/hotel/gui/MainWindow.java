/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.hotel.gui;

import cz.muni.fi.pv168.hotel.Guest;
import cz.muni.fi.pv168.hotel.GuestManager;
import cz.muni.fi.pv168.hotel.GuestManagerImpl;
import cz.muni.fi.pv168.hotel.Room;
import cz.muni.fi.pv168.hotel.RoomManager;
import cz.muni.fi.pv168.hotel.RoomManagerImpl;
import cz.muni.fi.pv168.hotel.exception.ServiceFailureException;
import cz.muni.fi.pv168.hotel.exception.ValidationException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lydie
 */
public class MainWindow extends javax.swing.JFrame {

    private final RoomManager roomManager;
    private final GuestManager guestManager;
    private Long guestID;

    /**
     * Creates new form MainWindow
     */
    public MainWindow(RoomManager roomManager, GuestManager guestManager) {
        this.roomManager = roomManager;
        this.guestManager = guestManager;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accommodation = new javax.swing.JButton();
        roomButton = new javax.swing.JButton();
        guestButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        showTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectionTabel = new javax.swing.JList<>();
        addRoom = new javax.swing.JButton();
        removeRoom = new javax.swing.JButton();
        findTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        accommodation.setText("Ubytovat");
        accommodation.setToolTipText("");
        accommodation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accommodationActionPerformed(evt);
            }
        });

        roomButton.setText("Pokoje");
        roomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomButtonActionPerformed(evt);
            }
        });

        guestButton.setText("Hoste");
        guestButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guestButtonMouseClicked(evt);
            }
        });
        guestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestButtonActionPerformed(evt);
            }
        });

        checkoutButton.setText("Odhlasit hosta");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        showTextArea.setColumns(20);
        showTextArea.setRows(5);
        jScrollPane1.setViewportView(showTextArea);

        selectionTabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectionTabelMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(selectionTabel);

        jScrollPane3.setViewportView(jScrollPane2);

        addRoom.setText("+");
        addRoom.setFocusable(false);
        addRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomActionPerformed(evt);
            }
        });

        removeRoom.setText("-");
        removeRoom.setFocusable(false);
        removeRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoomActionPerformed(evt);
            }
        });

        findTextField.setText("Hledej...");
        findTextField.setToolTipText("Hledej...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accommodation, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(roomButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(guestButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 181, Short.MAX_VALUE)
                                .addComponent(checkoutButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(accommodation, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomButton)
                            .addComponent(guestButton)))
                    .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRoom)
                    .addComponent(removeRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void accommodationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accommodationActionPerformed
        AccommodationSwingWorker accommodationSwingWorker = new AccommodationSwingWorker(roomManager, guestManager);
        accommodationSwingWorker.execute();
    }//GEN-LAST:event_accommodationActionPerformed

    private void guestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestButtonActionPerformed
        // TODO add your handling code here:
        GuestListSwingWorker guestListSwingWorker = new GuestListSwingWorker(guestManager);
        guestListSwingWorker.execute();

        showTextArea.setText("");
        findTextField.setVisible(true);
        addRoom.setVisible(false);
        removeRoom.setVisible(false);


    }//GEN-LAST:event_guestButtonActionPerformed

    private void roomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomButtonActionPerformed
        // TODO add your handling code here:
        RoomListSwingWorker roomListSwingWorker = new RoomListSwingWorker(roomManager);
        roomListSwingWorker.execute();

        showTextArea.setText("");
        addRoom.setVisible(true);
        removeRoom.setVisible(true);
        removeRoom.setEnabled(false);
        findTextField.setVisible(false);


    }//GEN-LAST:event_roomButtonActionPerformed

    private void selectionTabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectionTabelMouseClicked
        // TODO add your handling code here:
        showTextArea.setText("");
        PrintSwingWorker printSwingWorker;
        int indexOfValue = selectionTabel.getSelectedIndex();
        if ((selectionTabel.getModel() instanceof GuestListModel)) {
            printSwingWorker = new PrintSwingWorker(guestManager, indexOfValue);
        } else {
            printSwingWorker = new PrintSwingWorker(roomManager, indexOfValue);

        }
        printSwingWorker.execute();

    }//GEN-LAST:event_selectionTabelMouseClicked

    private void addRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomActionPerformed
        AddRoom addRoom = new AddRoom(roomManager);
        addRoom.setVisible(true);

    }//GEN-LAST:event_addRoomActionPerformed

    private void guestButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guestButtonMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_guestButtonMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        addRoom.setVisible(false);
        removeRoom.setVisible(false);
        findTextField.setVisible(false);
    }//GEN-LAST:event_formWindowActivated

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        CheckOutSwingWorker checkOutSwingWorker = new CheckOutSwingWorker(guestManager, guestID);
        checkOutSwingWorker.execute();
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void removeRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoomActionPerformed
        // TODO add your handling code here:
        int indexOfValue = selectionTabel.getSelectedIndex();
        RemoveRoomSwingWorker removeRoomSwingWorker = new RemoveRoomSwingWorker(roomManager, indexOfValue, guestManager);
        removeRoomSwingWorker.execute();

        roomButtonActionPerformed(evt);
    }//GEN-LAST:event_removeRoomActionPerformed

    private class RemoveRoomSwingWorker extends SwingWorker<Room, Room> {

        private final RoomManager roomManager;
        private final int index;
        private final GuestManager guestManager;

        public RemoveRoomSwingWorker(RoomManager roomManager, int index, GuestManager guestManager) {
            this.roomManager = roomManager;
            this.index = index;
            this.guestManager = guestManager;
        }

        @Override
        protected Room doInBackground() throws Exception {
            Room room = roomManager.findAllRooms().get(index);
            if (!guestManager.freeRooms().contains(room)) {
                return null;
            }
            return room;
        }

        @Override
        protected void done() {
            
            try {
                roomManager.deleteRoom(get());
            } catch (IllegalArgumentException eae) {
                JOptionPane.showMessageDialog(null, "Nějaký host je ubytován v tomto pokoji");
            } catch (InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private class PrintSwingWorker extends SwingWorker<Object, Object> {

        private final RoomManager roomManager;
        private final GuestManager guestManager;
        private final int index;

        public PrintSwingWorker(GuestManager guestManager, int index) {
            this.guestManager = guestManager;
            this.index = index;
            this.roomManager = null;
        }

        public PrintSwingWorker(RoomManager roomManager, int index) {
            this.roomManager = roomManager;
            this.index = index;
            this.guestManager = null;
        }

        @Override
        protected Object doInBackground() throws Exception {
            if (guestManager != null) {
                Guest guest = guestManager.findAllGuest().get(index);
                guestID = guest.getId();
                return guest;

            } else {
                removeRoom.setEnabled(true);
                return roomManager.findAllRooms().get(index);
            }

        }

        @Override
        protected void done() {
            try {
                showTextArea.append(get().toString());
            } catch (InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class RoomListSwingWorker extends SwingWorker<List<Room>, List<Room>> {

        private final RoomManager roomManager;

        public RoomListSwingWorker(RoomManager roomManager) {
            this.roomManager = roomManager;
        }

        @Override
        protected List<Room> doInBackground() throws Exception {
            List<Room> roomList = roomManager.findAllRooms();
            return roomList;
        }

        @Override
        protected void done() {
            try {
                selectionTabel.setModel((ListModel<String>) new RoomListModel(get()));
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class GuestListSwingWorker extends SwingWorker<List<Guest>, List<Guest>> {

        @Override
        protected void done() {
            try {
                selectionTabel.setModel((ListModel<String>) new GuestListModel(get()));
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private final GuestManager guestManager;

        public GuestListSwingWorker(GuestManager guestManager) {
            this.guestManager = guestManager;
        }

        @Override
        protected List<Guest> doInBackground() throws Exception {
            List<Guest> guestList = guestManager.findAllGuest();
            return guestList;
        }

    }

    private class CheckOutSwingWorker extends SwingWorker<Integer, Integer> {

        private final GuestManager guestManager;
        private final Long guestId;

        public CheckOutSwingWorker(GuestManager guestManager, Long guestId) {

            this.guestManager = guestManager;
            this.guestId = guestId;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            Guest guest = new Guest();
            guest = guestManager.getGuest(guestId);
            guestManager.checkOutGuest(guest);
            return null;
        }
    }

    private class AccommodationSwingWorker extends SwingWorker<Integer, Integer> {

        private final RoomManager roomManager;
        private final GuestManager guestManager;

        public AccommodationSwingWorker(RoomManager roomManager, GuestManager guestManager) {

            this.roomManager = roomManager;
            this.guestManager = guestManager;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            List<Room> freeRooms = guestManager.freeRooms();
            if (freeRooms.size() == 0) {
                return 2;
            }
            return 1;
        }

        @Override
        protected void done() {
            int result = 0;
            try {
                result = get();
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(AddRoom.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                java.util.logging.Logger.getLogger(AddRoom.class.getName()).log(Level.SEVERE, null, ex);
            }
            switch (result) {
                case 1:
                    CheckIn checkIn = new CheckIn(roomManager, guestManager);
                    checkIn.setVisible(true);
                    break;
                case 2:
                    JOptionPane.showMessageDialog(null, "Všechny pokoje jsou plné");
                    break;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accommodation;
    private javax.swing.JButton addRoom;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JTextField findTextField;
    private javax.swing.JButton guestButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton removeRoom;
    private javax.swing.JButton roomButton;
    private javax.swing.JList<String> selectionTabel;
    private javax.swing.JTextArea showTextArea;
    // End of variables declaration//GEN-END:variables
}
